<?xml version="1.0" encoding="UTF-8"?>
<!--

    The MIT License
    Copyright Â© 2010 JmxTrans team

    Permission is hereby granted, free of charge, to any person obtaining a copy
    of this software and associated documentation files (the "Software"), to deal
    in the Software without restriction, including without limitation the rights
    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the Software is
    furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in
    all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
    THE SOFTWARE.

-->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<parent>
		<groupId>org.jmxtrans</groupId>
		<artifactId>jmxtrans-parent</artifactId>
		<version>273-SNAPSHOT</version>
	</parent>

	<artifactId>jmxtrans-docker-test</artifactId>

	<packaging>pom</packaging>

	<name>JmxTrans - Docker tests</name>

	<description>This module contains integration of Deb and RPM packages.
		It uses Docker to check that these packages install properly on various Linux distributions.
		It is not included in the final packaging.</description>

	<properties>
		<deb.install.artifact>org.jmxtrans:jmxtrans:deb</deb.install.artifact>
		<deb.install.file>jmxtrans.deb</deb.install.file>
		<deb.run.cmd>debconf-set-selections &lt;&lt;&lt; "jmxtrans jmxtrans/jvm_heap_size string 512"; dpkg -i /maven/${deb.install.file}; /etc/init.d/jmxtrans start; /maven/verify.sh</deb.run.cmd>

		<docker.skip>true</docker.skip>
		<docker.verbose>true</docker.verbose>

		<rpm.install.artifact>org.jmxtrans:jmxtrans:rpm</rpm.install.artifact>
		<rpm.install.file>jmxtrans.rpm</rpm.install.file>
		<rpm.run.cmd>rpm -ivh --nosignature --nodeps /maven/${rpm.install.file}; /etc/init.d/jmxtrans start; /maven/verify.sh</rpm.run.cmd>

		<verification.message>installation verified</verification.message>
		<verification.wait.time>120000</verification.wait.time>
	</properties>

	<build>
		<plugins>
			<plugin>
				<groupId>io.fabric8</groupId>
				<artifactId>docker-maven-plugin</artifactId>
				<configuration>
					<showLogs>true</showLogs>
					<images />
				</configuration>
				<executions>
					<execution>
						<id>start</id>
						<goals>
							<goal>build</goal>
							<goal>start</goal>
						</goals>
						<phase>pre-integration-test</phase>
					</execution>
					<execution>
						<id>stop</id>
						<goals>
							<goal>stop</goal>
						</goals>
						<phase>post-integration-test</phase>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<!-- There is no Java code in this project, let's skip PIT -->
				<groupId>org.pitest</groupId>
				<artifactId>pitest-maven</artifactId>
				<configuration>
					<skip>true</skip>
				</configuration>
			</plugin>
		</plugins>
	</build>

	<profiles>
		<profile>
			<id>deb</id>

			<dependencies>
				<dependency>
					<groupId>${project.groupId}</groupId>
					<artifactId>jmxtrans</artifactId>
					<version>${project.version}</version>
					<type>deb</type>
				</dependency>
			</dependencies>

			<build>
				<plugins>
					<plugin>
						<groupId>io.fabric8</groupId>
						<artifactId>docker-maven-plugin</artifactId>

						<configuration>
							<images combine.children="append">
								<image>
									<name>ubuntu-20.04/${project.artifactId}:${project.version}</name>
									<build>
										<from>ubuntu:20.04</from>
										<!-- codename focal -->
										<assembly>
											<descriptor>assembly-docker-deb.xml</descriptor>
											<basedir>/</basedir>
										</assembly>
										<runCmds>
											<!-- See https://adoptopenjdk.net/installation.html#linux-pkg -->
											<run>apt update</run>
											<run>apt install -y wget apt-transport-https gnupg</run>
											<run>wget -qO - https://adoptopenjdk.jfrog.io/adoptopenjdk/api/gpg/key/public | apt-key add -</run>
											<run>echo "deb https://adoptopenjdk.jfrog.io/adoptopenjdk/deb focal main" &gt; /etc/apt/sources.list.d/adoptopenjdk.list</run>
											<run>apt update</run>
											<run>apt install -y adoptopenjdk-8-hotspot-jre</run>
										</runCmds>
									</build>
									<run>
										<cmd>
											<exec>
												<arg>/bin/bash</arg>
												<arg>-c</arg>
												<arg>${deb.run.cmd}</arg>
											</exec>
										</cmd>
										<wait>
											<log>${verification.message}</log>
											<time>${verification.wait.time}</time>
										</wait>
									</run>
								</image>
								<image>
									<name>ubuntu-18.04/${project.artifactId}:${project.version}</name>
									<build>
										<from>ubuntu:18.04</from>
										<!-- codename bionic -->
										<assembly>
											<descriptor>assembly-docker-deb.xml</descriptor>
											<basedir>/</basedir>
										</assembly>
										<runCmds>
											<!-- See https://adoptopenjdk.net/installation.html#linux-pkg -->
											<run>apt update</run>
											<run>apt install -y wget apt-transport-https gnupg</run>
											<run>wget -qO - https://adoptopenjdk.jfrog.io/adoptopenjdk/api/gpg/key/public | apt-key add -</run>
											<run>echo "deb https://adoptopenjdk.jfrog.io/adoptopenjdk/deb bionic main" &gt; /etc/apt/sources.list.d/adoptopenjdk.list</run>
											<run>apt update</run>
											<run>apt install -y adoptopenjdk-8-hotspot-jre</run>
										</runCmds>
									</build>
									<run>
										<cmd>
											<exec>
												<arg>/bin/bash</arg>
												<arg>-c</arg>
												<arg>${deb.run.cmd}</arg>
											</exec>
										</cmd>
										<wait>
											<log>${verification.message}</log>
											<time>${verification.wait.time}</time>
										</wait>
									</run>
								</image>
								<image>
									<name>ubuntu-16.04/${project.artifactId}:${project.version}</name>
									<build>
										<from>ubuntu:16.04</from>
										<!-- codename xenial -->
										<assembly>
											<descriptor>assembly-docker-deb.xml</descriptor>
											<basedir>/</basedir>
										</assembly>
										<runCmds>
											<!-- See https://adoptopenjdk.net/installation.html#linux-pkg -->
											<run>apt update</run>
											<run>apt install -y wget apt-transport-https gnupg</run>
											<run>wget -qO - https://adoptopenjdk.jfrog.io/adoptopenjdk/api/gpg/key/public | apt-key add -</run>
											<run>echo "deb https://adoptopenjdk.jfrog.io/adoptopenjdk/deb xenial main" &gt; /etc/apt/sources.list.d/adoptopenjdk.list</run>
											<run>apt update</run>
											<run>apt install -y adoptopenjdk-8-hotspot-jre</run>
										</runCmds>
									</build>
									<run>
										<cmd>
											<exec>
												<arg>/bin/bash</arg>
												<arg>-c</arg>
												<arg>${deb.run.cmd}</arg>
											</exec>
										</cmd>
										<wait>
											<log>${verification.message}</log>
											<time>${verification.wait.time}</time>
										</wait>
									</run>
								</image>
							</images>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>

		<profile>
			<id>docker.debian</id>

			<dependencies>
				<dependency>
					<groupId>${project.groupId}</groupId>
					<artifactId>jmxtrans</artifactId>
					<version>${project.version}</version>
					<type>deb</type>
				</dependency>
			</dependencies>

			<build>
				<plugins>
					<plugin>
						<groupId>io.fabric8</groupId>
						<artifactId>docker-maven-plugin</artifactId>

						<configuration>
							<images combine.children="append">
								<image>
									<name>debian-10/${project.artifactId}:${project.version}</name>
									<build>
										<from>debian:10</from>
										<!-- codename buster -->
										<assembly>
											<descriptor>assembly-docker-deb.xml</descriptor>
											<basedir>/</basedir>
										</assembly>
										<runCmds>
											<!-- See https://adoptopenjdk.net/installation.html#linux-pkg -->
											<run>apt update</run>
											<run>apt install -y wget apt-transport-https gnupg</run>
											<run>wget -qO - https://adoptopenjdk.jfrog.io/adoptopenjdk/api/gpg/key/public | apt-key add -</run>
											<run>echo "deb https://adoptopenjdk.jfrog.io/adoptopenjdk/deb buster main" &gt; /etc/apt/sources.list.d/adoptopenjdk.list</run>
											<run>apt update</run>
											<run>apt install -y adoptopenjdk-8-hotspot-jre</run>
										</runCmds>
									</build>
									<run>
										<cmd>
											<exec>
												<arg>/bin/bash</arg>
												<arg>-c</arg>
												<arg>${deb.run.cmd}</arg>
											</exec>
										</cmd>
										<wait>
											<log>${verification.message}</log>
											<time>${verification.wait.time}</time>
										</wait>
									</run>
								</image>
							</images>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>

		<profile>
			<id>rpm</id>

			<dependencies>
				<dependency>
					<groupId>${project.groupId}</groupId>
					<artifactId>jmxtrans</artifactId>
					<version>${project.version}</version>
					<type>rpm</type>
				</dependency>
			</dependencies>

			<build>
				<plugins>
					<plugin>
						<groupId>io.fabric8</groupId>
						<artifactId>docker-maven-plugin</artifactId>

						<configuration>
							<images combine.children="append">

								<image>
									<name>centos8/${project.artifactId}:${project.version}</name>
									<build>
										<from>jmxtrans/testing:centos7-0</from>
										<assembly>
											<descriptor>assembly-docker-rpm.xml</descriptor>
											<basedir>/</basedir>
										</assembly>
										<runCmds>
											<run>yum install -y adoptopenjdk-8-hotspot</run>
										</runCmds>
									</build>
									<run>
										<cmd>
											<exec>
												<arg>/bin/bash</arg>
												<arg>-c</arg>
												<arg>${rpm.run.cmd}</arg>
											</exec>
										</cmd>
										<wait>
											<log>${verification.message}</log>
											<time>${verification.wait.time}</time>
										</wait>
									</run>
								</image>
								<image>
									<name>centos7/${project.artifactId}:${project.version}</name>
									<build>
										<assembly>
											<descriptor>assembly-docker-rpm.xml</descriptor>
											<basedir>/</basedir>
										</assembly>

										<from>jmxtrans/testing:centos7-0</from>
									</build>
									<run>
										<cmd>
											<exec>
												<arg>/bin/bash</arg>
												<arg>-c</arg>
												<arg>${rpm.run.cmd}</arg>
											</exec>
										</cmd>
										<wait>
											<log>${verification.message}</log>
											<time>${verification.wait.time}</time>
										</wait>
									</run>
								</image>
								<image>
									<name>opensuse42.1/${project.artifactId}:${project.version}</name>
									<build>
										<assembly>
											<descriptor>assembly-docker-rpm.xml</descriptor>
											<basedir>/</basedir>
										</assembly>

										<from>jmxtrans/testing:opensuse42.1-0</from>
									</build>
									<run>
										<cmd>
											<exec>
												<arg>/bin/bash</arg>
												<arg>-c</arg>
												<arg>${rpm.run.cmd}</arg>
											</exec>
										</cmd>
										<wait>
											<log>${verification.message}</log>
											<time>${verification.wait.time}</time>
										</wait>
									</run>
								</image>
							</images>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>

</project>
